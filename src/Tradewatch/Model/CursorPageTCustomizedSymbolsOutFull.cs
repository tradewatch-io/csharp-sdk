/*
 * tradewatch.io
 *
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tradewatch.Client.OpenAPIDateConverter;

namespace Tradewatch.Model
{
    /// <summary>
    /// CursorPageTCustomizedSymbolsOutFull
    /// </summary>
    [DataContract(Name = "CursorPage__T_Customized_SymbolsOutFull_")]
    public partial class CursorPageTCustomizedSymbolsOutFull : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CursorPageTCustomizedSymbolsOutFull" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CursorPageTCustomizedSymbolsOutFull() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CursorPageTCustomizedSymbolsOutFull" /> class.
        /// </summary>
        /// <param name="items">items (required).</param>
        /// <param name="total">total.</param>
        /// <param name="currentPage">currentPage.</param>
        /// <param name="currentPageBackwards">currentPageBackwards.</param>
        /// <param name="previousPage">previousPage.</param>
        /// <param name="nextPage">nextPage.</param>
        public CursorPageTCustomizedSymbolsOutFull(List<SymbolsOutFull> items = default(List<SymbolsOutFull>), int? total = default(int?), string currentPage = default(string), string currentPageBackwards = default(string), string previousPage = default(string), string nextPage = default(string))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for CursorPageTCustomizedSymbolsOutFull and cannot be null");
            }
            this.Items = items;
            this.Total = total;
            this.CurrentPage = currentPage;
            this.CurrentPageBackwards = currentPageBackwards;
            this.PreviousPage = previousPage;
            this.NextPage = nextPage;
        }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<SymbolsOutFull> Items { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = true)]
        public int? Total { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPage
        /// </summary>
        [DataMember(Name = "current_page", EmitDefaultValue = true)]
        public string CurrentPage { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPageBackwards
        /// </summary>
        [DataMember(Name = "current_page_backwards", EmitDefaultValue = true)]
        public string CurrentPageBackwards { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPage
        /// </summary>
        [DataMember(Name = "previous_page", EmitDefaultValue = true)]
        public string PreviousPage { get; set; }

        /// <summary>
        /// Gets or Sets NextPage
        /// </summary>
        [DataMember(Name = "next_page", EmitDefaultValue = true)]
        public string NextPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CursorPageTCustomizedSymbolsOutFull {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  CurrentPageBackwards: ").Append(CurrentPageBackwards).Append("\n");
            sb.Append("  PreviousPage: ").Append(PreviousPage).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
