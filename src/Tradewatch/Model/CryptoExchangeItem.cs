/*
 * tradewatch.io
 *
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tradewatch.Client.OpenAPIDateConverter;

namespace Tradewatch.Model
{
    /// <summary>
    /// A cryptocurrency exchange
    /// </summary>
    [DataContract(Name = "CryptoExchangeItem")]
    public partial class CryptoExchangeItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoExchangeItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptoExchangeItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoExchangeItem" /> class.
        /// </summary>
        /// <param name="id">Exchange identifier (required).</param>
        /// <param name="name">Exchange name (required).</param>
        /// <param name="yearEstablished">Exchange established year (required).</param>
        /// <param name="country">Exchange country (required).</param>
        /// <param name="website">Exchange website URL (required).</param>
        public CryptoExchangeItem(string id = default(string), string name = default(string), int yearEstablished = default(int), string country = default(string), string website = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CryptoExchangeItem and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CryptoExchangeItem and cannot be null");
            }
            this.Name = name;
            this.YearEstablished = yearEstablished;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for CryptoExchangeItem and cannot be null");
            }
            this.Country = country;
            // to ensure "website" is required (not null)
            if (website == null)
            {
                throw new ArgumentNullException("website is a required property for CryptoExchangeItem and cannot be null");
            }
            this.Website = website;
        }

        /// <summary>
        /// Exchange identifier
        /// </summary>
        /// <value>Exchange identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Exchange name
        /// </summary>
        /// <value>Exchange name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Exchange established year
        /// </summary>
        /// <value>Exchange established year</value>
        [DataMember(Name = "year_established", IsRequired = true, EmitDefaultValue = true)]
        public int YearEstablished { get; set; }

        /// <summary>
        /// Exchange country
        /// </summary>
        /// <value>Exchange country</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Exchange website URL
        /// </summary>
        /// <value>Exchange website URL</value>
        [DataMember(Name = "website", IsRequired = true, EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CryptoExchangeItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  YearEstablished: ").Append(YearEstablished).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
