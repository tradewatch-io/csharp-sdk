/*
 * tradewatch.io
 *
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Tradewatch.Client;
using Tradewatch.Model;

namespace Tradewatch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Last Quote
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for the provided symbol.
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LastQuote</returns>
        LastQuote getQuote(string symbol, int? precision = default(int?), int operationIndex = 0);

        /// <summary>
        /// Last Quote
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for the provided symbol.
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LastQuote</returns>
        ApiResponse<LastQuote> getQuoteWithHttpInfo(string symbol, int? precision = default(int?), int operationIndex = 0);
        /// <summary>
        /// Available Symbols
        /// </summary>
        /// <remarks>
        /// Get list of available symbols
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CursorPageTCustomizedSymbolsOutFull</returns>
        CursorPageTCustomizedSymbolsOutFull getSymbols(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// Available Symbols
        /// </summary>
        /// <remarks>
        /// Get list of available symbols
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CursorPageTCustomizedSymbolsOutFull</returns>
        ApiResponse<CursorPageTCustomizedSymbolsOutFull> getSymbolsWithHttpInfo(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Last Quote
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for the provided symbol.
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LastQuote</returns>
        System.Threading.Tasks.Task<LastQuote> getQuoteAsync(string symbol, int? precision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Last Quote
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for the provided symbol.
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LastQuote)</returns>
        System.Threading.Tasks.Task<ApiResponse<LastQuote>> getQuoteWithHttpInfoAsync(string symbol, int? precision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Available Symbols
        /// </summary>
        /// <remarks>
        /// Get list of available symbols
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CursorPageTCustomizedSymbolsOutFull</returns>
        System.Threading.Tasks.Task<CursorPageTCustomizedSymbolsOutFull> getSymbolsAsync(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Available Symbols
        /// </summary>
        /// <remarks>
        /// Get list of available symbols
        /// </remarks>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CursorPageTCustomizedSymbolsOutFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<CursorPageTCustomizedSymbolsOutFull>> getSymbolsWithHttpInfoAsync(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndicesApi : IIndicesApiSync, IIndicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IndicesApi : IIndicesApi
    {
        private Tradewatch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IndicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndicesApi(string basePath)
        {
            this.Configuration = Tradewatch.Client.Configuration.MergeConfigurations(
                Tradewatch.Client.GlobalConfiguration.Instance,
                new Tradewatch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Tradewatch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tradewatch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Tradewatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IndicesApi(Tradewatch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Tradewatch.Client.Configuration.MergeConfigurations(
                Tradewatch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Tradewatch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tradewatch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Tradewatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IndicesApi(Tradewatch.Client.ISynchronousClient client, Tradewatch.Client.IAsynchronousClient asyncClient, Tradewatch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tradewatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tradewatch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tradewatch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tradewatch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradewatch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Last Quote Get the last quote tick for the provided symbol.
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LastQuote</returns>
        public LastQuote getQuote(string symbol, int? precision = default(int?), int operationIndex = 0)
        {
            Tradewatch.Client.ApiResponse<LastQuote> localVarResponse = getQuoteWithHttpInfo(symbol, precision);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Quote Get the last quote tick for the provided symbol.
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LastQuote</returns>
        public Tradewatch.Client.ApiResponse<LastQuote> getQuoteWithHttpInfo(string symbol, int? precision = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new Tradewatch.Client.ApiException(400, "Missing required parameter 'symbol' when calling IndicesApi->getQuote");
            }

            Tradewatch.Client.RequestOptions localVarRequestOptions = new Tradewatch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tradewatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Tradewatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbol", Tradewatch.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            if (precision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "precision", precision));
            }

            localVarRequestOptions.Operation = "IndicesApi.getQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LastQuote>("/indices/symbols/{symbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("getQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Quote Get the last quote tick for the provided symbol.
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LastQuote</returns>
        public async System.Threading.Tasks.Task<LastQuote> getQuoteAsync(string symbol, int? precision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tradewatch.Client.ApiResponse<LastQuote> localVarResponse = await getQuoteWithHttpInfoAsync(symbol, precision, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Quote Get the last quote tick for the provided symbol.
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="precision"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LastQuote)</returns>
        public async System.Threading.Tasks.Task<Tradewatch.Client.ApiResponse<LastQuote>> getQuoteWithHttpInfoAsync(string symbol, int? precision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new Tradewatch.Client.ApiException(400, "Missing required parameter 'symbol' when calling IndicesApi->getQuote");
            }


            Tradewatch.Client.RequestOptions localVarRequestOptions = new Tradewatch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tradewatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Tradewatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbol", Tradewatch.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            if (precision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "precision", precision));
            }

            localVarRequestOptions.Operation = "IndicesApi.getQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LastQuote>("/indices/symbols/{symbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("getQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Available Symbols Get list of available symbols
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CursorPageTCustomizedSymbolsOutFull</returns>
        public CursorPageTCustomizedSymbolsOutFull getSymbols(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            Tradewatch.Client.ApiResponse<CursorPageTCustomizedSymbolsOutFull> localVarResponse = getSymbolsWithHttpInfo(mode, size, page, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Symbols Get list of available symbols
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CursorPageTCustomizedSymbolsOutFull</returns>
        public Tradewatch.Client.ApiResponse<CursorPageTCustomizedSymbolsOutFull> getSymbolsWithHttpInfo(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            Tradewatch.Client.RequestOptions localVarRequestOptions = new Tradewatch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tradewatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Tradewatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "IndicesApi.getSymbols";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CursorPageTCustomizedSymbolsOutFull>("/indices/symbols", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("getSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Available Symbols Get list of available symbols
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CursorPageTCustomizedSymbolsOutFull</returns>
        public async System.Threading.Tasks.Task<CursorPageTCustomizedSymbolsOutFull> getSymbolsAsync(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tradewatch.Client.ApiResponse<CursorPageTCustomizedSymbolsOutFull> localVarResponse = await getSymbolsWithHttpInfoAsync(mode, size, page, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Symbols Get list of available symbols
        /// </summary>
        /// <exception cref="Tradewatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Listing mode</param>
        /// <param name="size">Page offset (optional, default to 50)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="cursor">Cursor for the next page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CursorPageTCustomizedSymbolsOutFull)</returns>
        public async System.Threading.Tasks.Task<Tradewatch.Client.ApiResponse<CursorPageTCustomizedSymbolsOutFull>> getSymbolsWithHttpInfoAsync(SymbolsListMode mode, int? size = default(int?), int? page = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tradewatch.Client.RequestOptions localVarRequestOptions = new Tradewatch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tradewatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Tradewatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "IndicesApi.getSymbols";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(Tradewatch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CursorPageTCustomizedSymbolsOutFull>("/indices/symbols", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("getSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
